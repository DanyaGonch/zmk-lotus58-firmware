/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        misc_layer_combo {
            bindings = <&hold_tap_layer 2 2>;
            key-positions = <57 56>;
            layers = <0>;
        };

        del_combo {
            bindings = <&kp DELETE>;
            key-positions = <59 58>;
            layers = <0>;
        };

        ctrl_enter_combo {
            bindings = <&kp LC(ENTER)>;
            key-positions = <55 54>;
            layers = <0>;
        };

        game_layer_enable_combo {
            bindings = <&to 3>;
            key-positions = <55 56>;
            layers = <1>;
        };

        game_layer_disable_combo {
            bindings = <&to 0>;
            key-positions = <55 56>;
            layers = <3>;
        };
    };

    behaviors {
        prepinak_0: prepinak_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_0";
            bindings = <&kp LS(N0)>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_1: prepinak_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_1";
            bindings = <&kp LS(N1)>, <&kp N1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_2: prepinak_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_2";
            bindings = <&kp LS(N2)>, <&kp N2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_3: prepinak_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_3";
            bindings = <&kp LS(N3)>, <&kp N3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_4: prepinak_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_4";
            bindings = <&kp LS(N4)>, <&kp N4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_5: prepinak_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_5";
            bindings = <&kp LS(N5)>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_6: prepinak_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_6";
            bindings = <&kp LS(NUMBER_6)>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_7: prepinak_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_7";
            bindings = <&kp LS(N7)>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_8: prepinak_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_8";
            bindings = <&kp LS(N8)>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        prepinak_9: prepinak_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "PREPINAK_9";
            bindings = <&kp LS(N9)>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        sticky_tap: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "hold-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
        };

        hold_tap_layer: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            bindings = <
&kp ESC       &prepinak_1  &prepinak_2  &prepinak_3       &prepinak_4                        &prepinak_5                                       &prepinak_6          &prepinak_7   &prepinak_8    &prepinak_9  &prepinak_0  &kp MINUS
&kp GRAVE     &kp Q        &kp W        &kp E             &kp R                              &kp T                                             &kp Y                &kp U         &kp I          &kp O        &kp P        &kp EQUAL
&kp TAB       &kp A        &kp S        &kp D             &kp F                              &kp G        &none             &none              &kp H                &kp J         &kp K          &kp L        &kp SEMI     &kp SQT
&kp LEFT_WIN  &kp Z        &kp X        &kp C             &kp V                              &kp B        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp N                &kp M         &kp COMMA      &kp DOT      &kp FSLH     &kp BACKSLASH
                                        &kp LEFT_CONTROL  &sticky_tap LEFT_SHIFT LEFT_SHIFT  &kp ENTER    &kp BACKSPACE     &kp SPACE          &hold_tap_layer 1 1  &kp LEFT_ALT  &kp LG(SPACE)
            >;

            label = "Main";
        };

        motion_layer {
            bindings = <
&to 0          &kp F1                  &kp F2                  &kp F3                   &kp F4                   &kp F5                                        &kp F6        &kp F7    &kp F8         &kp F9       &kp F10    &kp F11
&kp LG(PG_UP)  &kp LG(LA(LEFT_ARROW))  &kp LG(LS(LEFT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &kp LG(LA(RIGHT_ARROW))  &kp C_BRIGHTNESS_INC                          &kp C_VOL_UP  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp F12
&kp LG(PG_DN)  &kp LC(LA(LEFT))        &kp LC(LA(LS(LEFT)))    &kp LC(LA(LS(RIGHT)))    &kp LC(LA(RIGHT))        &kp C_BRIGHTNESS_DEC  &none       &none       &kp C_VOL_DN  &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp C_SLEEP
&trans         &kp LG(LEFT)            &kp LG(DOWN_ARROW)      &kp LG(UP_ARROW)         &kp LG(RIGHT)            &kp C_PLAY_PAUSE      &kp C_PREV  &kp C_NEXT  &kp C_MUTE    &kp N0    &kp LC(E)      &kp LC(Y)    &kp DLLR   &kp C_AL_LOCK
                                                               &trans                   &trans                   &trans                &trans      &trans      &to 0         &trans    &trans
            >;

            label = "Motion";
        };

        misc_layer {
            bindings = <
&to 0      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                   &none            &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_N9   &kp KP_PLUS   &none
&kp TAB    &sys_reset    &bootloader   &bt BT_CLR    &none         &kp SCROLLLOCK                                 &kp KP_NUMLOCK   &kp KP_N4        &kp KP_N5        &kp KP_N6   &kp KP_PLUS   &kp KP_DOT
&kp CAPS   &none         &none         &none         &none         &kp SYSREQ       &none           &none         &kp KP_DIVIDE    &kp KP_N1        &kp KP_N2        &kp KP_N3   &kp KP_ENTER  &kp ENTER
&kp LSHFT  &none         &none         &none         &none         &kp PAUSE_BREAK  &out OUT_USB    &out OUT_BLE  &kp KP_MULTIPLY  &kp KP_N0        &kp KP_N0        &kp KP_DOT  &kp KP_ENTER  &kp RSHFT
                                       &kp LCTRL     &kp LGUI      &kp LALT         &studio_unlock  &kp SPACE     &kp RALT         &kp RGUI         &kp RCTRL
            >;

            label = "Misc";
        };

        game_layer {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3     &kp N4    &kp N5                          &kp N6    &kp N7    &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E      &kp R     &kp T                           &kp Y     &kp U     &kp I      &kp O    &kp P     &kp EQUAL
&kp CAPS   &kp A   &kp S   &kp D      &kp F     &kp G     &none      &none      &kp H     &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C      &kp V     &kp B     &kp LBKT   &kp RBKT   &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp BSLH
                           &kp LCTRL  &kp LGUI  &kp LALT  &kp SPACE  &kp SPACE  &kp RALT  &kp RGUI  &kp RCTRL
            >;

            label = "Game";
        };
    };
};

